#!/usr/bin/env python3
#

import subprocess
import json
import sys

def getinfo(cmd):
    result = subprocess.run(cmd.split(" "), capture_output=True)
    if (result.returncode != 0):
        print(f'Unable to get processes {result.stderr.decode("utf-8") }')
    
    return result.stdout.decode("utf-8")

def arc():
    data = {} 
    f = open("/proc/spl/kstat/zfs/arcstats", "r")
    f.readline()
    f.readline()
    for line in f:
        items = line.split()
        data[items[0]] = int(items[2])
    f.close()
    print(json.dumps({"data": data}))

def dataset():
    data = [] 
    result = getinfo("/sbin/zfs list -p -r -H -o name,available,usedbydataset,usedbysnapshots,usedbyrefreservation,refcompressratio,refreservation,refquota")
    for line in result.splitlines():
       (name, avail, usedds, usedsnap, usedbyrefreservation, compression, reservation, quota) = line.split()
       if (quota == '-'):
          quota = 0
       data.append({ "name": name, "available": int(avail), "usedds": int(usedds), "usedsnapshot": int(usedsnap), "usedreservation": int(usedbyrefreservation), "compression": float(compression), "reservation": int(reservation), "quota": int(quota) })
    
    print(json.dumps({"data": data}))

def pool():
    data = [] 

    result = getinfo("/sbin/zpool status -x")
    poolname = ""
    poolerror = {}
    for line in result.splitlines():
        if poolname != "" and line.startswith("errors: "):
            poolerror[poolname] = line.split(" ")[1]
            poolname = ""
        if line.startswith("  pool: "):
            poolname = line.split(": ")[1]

    result = getinfo("/sbin/zpool list -p -H -o name,size,allocated,free,fragmentation,health,checkpoint")
    for line in result.splitlines():
       (name, size, used, free, fragmentation, health, checkpoint) = line.split()
       if (checkpoint == '-'):
          checkpoint = 0
       f = open(f'/proc/spl/kstat/zfs/{name}/io', "r")
       f.readline()
       f.readline()
       (nread, nwritten, reads, writes, wtime, wlentime, wupdate, rtime, rlentime, rupdate, wcnt, rcnt) = f.readline().split()
       f.close()
       errors = 0
       if name in poolerror:
          errors = poolerror[name]

       data.append({ "name": name, "size": int(size), "used": int(used), "free": int(free), "fragmentation": int(fragmentation), "health": health, "checkpoint": int(checkpoint), "nread": int(nread), "nwritten": int(nwritten), "reads": int(reads), "writes": int(writes), "wtime": int(wtime), "wlentime": int(wlentime), "wupdate": int(wupdate), "rtime": int(rtime), "rlentime": int(rlentime), "rupdate": int(rupdate), "wcnt": int(wcnt), "rcnt": int(rcnt), "errors": errors })
       
    print(json.dumps({"data": data}))

def usage():
    print("zabbix-zfs <pool|ds>")
    sys.exit()

def main():
    if len(sys.argv) != 2:
        usage()
    if sys.argv[1] == "pool":
        pool()
    elif sys.argv[1] == "ds":
        dataset()
    elif sys.argv[1] == "arc":
        arc()

if __name__ == "__main__":
    main()
