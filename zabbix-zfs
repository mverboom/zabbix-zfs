#!/usr/bin/env python3
#

import subprocess
import json
import sys
import os
import fcntl
from pathlib import Path

fh = 0

def run_once(action):
   global fh
   lck = f'/run/zabbix/zabbix-zfs_{action}'
   fle = Path(lck)
   fle.touch(exist_ok=True)
   fh = open(os.path.realpath(lck), 'r')
   try:
      fcntl.flock(fh, fcntl.LOCK_EX | fcntl.LOCK_NB)
   except BlockingIOError:
      os._exit(1)

def getinfo(cmd):
    result = subprocess.run(cmd.split(" "), capture_output=True)
    if (result.returncode != 0):
        print(f'Unable to get processes {result.stderr.decode("utf-8") }')
    
    return result.stdout.decode("utf-8")

def arc():
    data = {} 
    try:
        with open("/proc/spl/kstat/zfs/arcstats", "r") as f:
            f.readline()
            f.readline()
            for line in f:
                items = line.split()
                data[items[0]] = int(items[2])
    except Exception:
        return 1
    print(json.dumps({"data": data}))
    return 0

def dataset():
    data = [] 
    try:
        result = getinfo("/sbin/zfs list -p -r -H -o name,available,usedbydataset,usedbysnapshots,usedbyrefreservation,refcompressratio,refreservation,refquota")
    except Exception:
        return 1
    for line in result.splitlines():
       (name, avail, usedds, usedsnap, usedbyrefreservation, compression, reservation, quota) = line.split()
       if (quota == '-'):
          quota = 0
       data.append({ "name": name, "available": int(avail), "usedds": int(usedds), "usedsnapshot": int(usedsnap), "usedreservation": int(usedbyrefreservation), "compression": float(compression), "reservation": int(reservation), "quota": int(quota) })
    
    print(json.dumps({"data": data}))
    return 0

def snapshot(exludepools):
    data = []
    exclude = exludepools.split(",")

    pools = getinfo("/sbin/zpool list -H -o name").split()
    for pool in pools:
        if pool not in exclude:
            try:
                result = getinfo(f"/sbin/zfs list -p -r -H -t snapshot -o name,used,creation {pool}")
            except Exception:
                return 1
            for line in result.splitlines():
               (name, used, creation) = line.split()
               data.append({ "name": name, "used": int(used), "creation": int(creation) })
            
    print(json.dumps({"data": data}))
    return 0

def pool():
    data = [] 

    try:
        result = getinfo("/sbin/zpool status -x")
    except Exception:
        return 1
    poolname = ""
    poolerror = {}
    for line in result.splitlines():
        if poolname != "" and line.startswith("errors: "):
            poolerror[poolname] = line.split(" ")[1]
            poolname = ""
        if line.startswith("  pool: "):
            poolname = line.split(": ")[1]

    try:
        result = getinfo("/sbin/zpool upgrade")
    except Exception:
        return 1
    poolupgrade = {}
    upgradefound = 0
    for line in result.splitlines():
        if upgradefound == 0 and line.startswith("---------------"):
            upgradefound = 1
        elif upgradefound == 1 and not line.startswith("  ") and line != "":
            poolupgrade[line] = 1

    try:
        result = getinfo("/sbin/zpool list -p -H -o name,size,allocated,free,fragmentation,health,checkpoint")
    except Exception:
        return 1
    for line in result.splitlines():
       (name, size, used, free, fragmentation, health, checkpoint) = line.split()
       if (checkpoint == '-'):
          checkpoint = 0
       errors = 0
       if name in poolerror:
          errors = poolerror[name]
       upgrade = 0
       if name in poolupgrade:
          upgrade = poolupgrade[name]

       data.append({ "name": name, "size": int(size), "used": int(used), "free": int(free), "fragmentation": int(fragmentation), "health": health, "checkpoint": int(checkpoint), "errors": errors, "upgrade": upgrade })
       
    print(json.dumps({"data": data}))
    return 0

def usage():
    print("zabbix-zfs <pool|ds|arc|snapshot>")
    sys.exit()

def main():
    if len(sys.argv) < 2:
        usage()
    run_once(sys.argv[1])
    if sys.argv[1] == "pool":
        sys.exit(pool())
    elif sys.argv[1] == "ds":
        sys.exit(dataset())
    elif sys.argv[1] == "arc":
        sys.exit(arc())
    elif sys.argv[1] == "snapshot":
        pools = ""
        if len(sys.argv) == 3:
            pools = sys.argv[2]
        sys.exit(snapshot(pools))

if __name__ == "__main__":
    main()
